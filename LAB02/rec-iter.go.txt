package main

import (
	"fmt"
	"log"
	"time"
)

var counter int = 0

func f_riter(a, b uint64, n int) uint64 {
	//defer timeTrack(time.Now(), "f_riter")
	counter += 1
	if n == 2 {
		return a
	}

	if n == 1 {
		return b
	}

	return f_riter(a+b, a, n-1)
}

func f_rec(n int) uint64 {
	//defer timeTrack(time.Now(), "f_rec")
	counter += 1
	if n == 1 || n == 2 {
		return 1
	}
	return f_rec(n-1) + f_rec(n-2)
}

func f_iter1(n int) uint64 {
	//defer timeTrack(time.Now(), "f_iter1")
	counter += 1
	var f uint64
	var f1, f2 uint64 = 1, 1

	if n == 2 || n == 1 {
		return 1
	}

	for n >= 3 {
		n--
		f = f1 + f2
		f1 = f2
		f2 = f
	}
	return f
}

func f_iter2(n int) uint64 {
	//defer timeTrack(time.Now(), "f_iter2")
	counter += 1
	var f uint64
	var f1, f2 uint64 = 1, 1

	if n == 2 || n == 1 {
		return 1
	}

	for i := 2; i <= n; i++ {
		f = f1 + f2
		f1 = f2
		f2 = f
	}
	return f
}

func f_siter(a, b, p, q uint64, n int) uint64 {
	defer timeTrack(time.Now(), "f_siter")
	counter += 1
	if n == 0 {
		return b
	}
	if n%2 == 0 {
		return f_siter(a, b, q*q+p*p, q*q+2*p*q, n/2)
	}
	return f_siter(b*q+a*q+a*p, b*p+a*q, p, q, n-1)
}

func main2() {
	fmt.Println(f_rec(10))
}

func main() {
	const N = 30
	fmt.Println("f_riter", f_riter(1, 1, N))
	fmt.Println("f_iter1", f_iter1(N))
	fmt.Println("f_iter2", f_iter2(N))
	fmt.Println("f_rec", f_rec(N))

	var line string
	fmt.Scan(&line)

	var start time.Time
	var elapsed time.Duration
	var tot int64 = 0
	const TIMES = 10

	for i := 0; i < TIMES; i++ {
		counter = 0
		start = time.Now()
		//fmt.Printf("f(%d) = %lu\n", N, f_riter(1, 1, N))
		f_riter(1, 1, N)
		elapsed = time.Since(start)
		tot += elapsed.Nanoseconds() / 1000
	}
	log.Printf("Tempo medio f_riter: %dms", tot)
	//fmt.Scan(&line)

	tot = 0
	for i := 0; i < TIMES; i++ {
		counter = 0
		start = time.Now()
		//fmt.Printf("f(%d) = %lu\n", N, f_iter1(N))
		f_iter1(N)
		elapsed = time.Since(start)
		tot += elapsed.Nanoseconds() / 1000
	}
	log.Printf("Tempo medio f_iter1: %dms", tot)
	//fmt.Scan(&line)

	tot = 0
	for i := 0; i < TIMES; i++ {
		counter = 0
		start = time.Now()
		//fmt.Printf("i = %d, f(%d) = %lu\n", i, N, f_siter(1, 0, 0, 1, N))
		f_siter(1, 0, 0, 1, N)
		elapsed = time.Since(start)
		tot += elapsed.Nanoseconds() / 1000
	}
	log.Printf("Tempo medio f_siter: %dms", tot)
	//fmt.Scan(&line)

	tot = 0
	for i := 0; i < TIMES; i++ {
		counter = 0
		start = time.Now()
		//fmt.Printf("i = %d, f(%d) = %lu\n", i, N, f_rec(N))
		f_rec(N)
		//fmt.Scan(&line)

		elapsed = time.Since(start)
		tot += elapsed.Nanoseconds() / 1000
	}
	log.Printf("Tempo medio f_rec: %dms", tot)
	//fmt.Scan(&line)

}

func timeTrack(start time.Time, name string) {
	elapsed := time.Since(start)
	log.Printf("%s took %dms", name, elapsed.Nanoseconds()/1000)
}
